import{F as v,d as I,I as C,e as b,B as x,f as y,h as w,i as F,b as V,c as M,U as k,g as A}from"./storybook-670e6310.js";import{C as B}from"./communityDto-8dbcede7.js";import{c as h,e as f,b as t,f as S,F as L,S as D}from"./store-583bd420.js";import{o as E}from"./eventHelper-afabd18e.js";import{u as H}from"./useValidation-87d2c1f1.js";import{H as K}from"./helpIconTooltip-126e8490.js";import{e as P}from"./imageValidation-369fe3ae.js";import{k as R}from"./form-7169fb77.js";import"./_commonjsHelpers-725317a4.js";import"./image-4eb0e5f9.js";import"./textValidation-ade014ff.js";const U=e=>{const[s,i]=H(e.validation),[c,u]=h(""),[d,l]=h(P(e.value));f(()=>{e.showValidationMessages===!0&&i(e.value)},[e.showValidationMessages]),f(()=>{(e.value==null||e.value.length===0)&&l([])},[e.value]);const p=a=>{a.keyCode==R.enter&&m()},m=()=>{const a=c();i([a]).isValid!==!1&&(d().includes(a)||(l(r=>{const n=[...r,a];return e.onChange(n),n}),u("")))},T=a=>()=>{l(g=>{const r=g.filter(n=>n!=a);return e.onChange(r),r})};return t(M,{get invalid(){return!s().isValid},get children(){return[t(v,{textAlign:"center",get for(){return e.id},get children(){return[S(()=>e.label),t(K,{get helpText(){return e.helpText}})]}}),t(I,{mb:"$3",get children(){return[t(C,{get id(){return e.id},class:"noselect",get placeholder(){return e.placeholder},get value(){return c()},get onInput(){return E(a=>{u(a)})},onKeyPress:p}),t(b,{px:0,get children(){return t(x,{variant:"outline",onClick:m,children:"+"})}})]}}),t(L,{get each(){return d()},children:a=>t(y,{mr:"$1",get children(){return[t(w,{ml:"$1",children:a}),t(F,{get onClick(){return T(a)}})]}})}),t(D,{get when(){return!s().isValid},get children(){return t(V,{get children(){return s().errorMessage}})}})]}})},X={title:"Form/TagInput",component:U,decorators:[k],tags:["autodocs"],argTypes:{...A()}},o={args:{label:"Labels",placeholder:"this is a placeholder",helpText:"This is a help icon with a tooltip",validation:B.tags.validator,onChange:()=>{}}};o.parameters={...o.parameters,docs:{...o.parameters?.docs,source:{originalSource:`{
  args: {
    label: 'Labels',
    placeholder: 'this is a placeholder',
    helpText: 'This is a help icon with a tooltip',
    validation: CommunityDtoMeta.tags.validator,
    onChange: () => {}
  }
}`,...o.parameters?.docs?.source}}};const Y=["Basic"];export{o as Basic,Y as __namedExportsOrder,X as default};
